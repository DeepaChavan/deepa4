from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Input
from tensorflow.keras.datasets import mnist
from tensorflow.keras.utils import to_categorical
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
#from sklearn.metrics import confusion_matrix

(train_X, train_y), (test_X, test_y) = mnist.load_data()

train_X = train_X.reshape((train_X.shape[0], 28, 28, 1)).astype('float32')
test_X = test_X.reshape((test_X.shape[0], 28, 28, 1)).astype('float32')

train_X = train_X / 255
test_X = test_X / 255

train_y = to_categorical(train_y)
test_y = to_categorical(test_y)
num_classes = test_y.shape[1]

model_cnn = Sequential()
model_cnn.add(Input(shape=(28, 28, 1)))
model_cnn.add(Conv2D(32, (5, 5), activation='relu'))
model_cnn.add(MaxPooling2D(pool_size=(2, 2)))
model_cnn.add(Flatten())
model_cnn.add(Dense(128, activation='relu'))
model_cnn.add(Dense(num_classes, activation='softmax'))

model_cnn.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

model_cnn.summary()

history = model_cnn.fit(train_X, train_y, epochs=5, validation_data=(test_X, test_y), verbose=1)

scores = model_cnn.evaluate(test_X, test_y, verbose=0)
print("CNN Error: %.2f%%" % (100-scores[1]*100))
print("CNN Accuracy: %.2f%%" % (scores[1]*100))

image_index = np.random.randint(0, len(test_X))
image = test_X[image_index]
image_for_prediction = np.expand_dims(image, axis=0)
prediction = model_cnn.predict(image_for_prediction)
predicted_class = np.argmax(prediction)
plt.imshow(image.reshape(28, 28), cmap='gray')
plt.title(f"Predicted Number: {predicted_class}")
plt.show()

# Imports
import matplotlib.pyplot as plt
from skimage import io, color, filters

# Load image
dog = io.imread('/content/dog.jpg')  

# Convert to grayscale
dog_gray = color.rgb2gray(dog)

# Apply filters
sharpen = filters.unsharp_mask(dog_gray, radius=1, amount=1)  # sharpen
blur = filters.gaussian(dog_gray, sigma=2)                     # blur
vertical = filters.sobel_v(dog_gray)                           # vertical edges

# Display images individually
plt.imshow(dog_gray, cmap='gray')
plt.title('Original')
plt.axis('off')
plt.show()

plt.imshow(sharpen, cmap='gray')
plt.title('Sharpen')
plt.axis('off')
plt.show()

plt.imshow(blur, cmap='gray')
plt.title('Blur')
plt.axis('off')
plt.show()

plt.imshow(vertical, cmap='gray')
plt.title('Vertical Edges')
plt.axis('off')
plt.show()